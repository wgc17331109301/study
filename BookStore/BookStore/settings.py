"""
Django settings for BookStore project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os,sys,datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

sys.path.insert(0,os.path.join(BASE_DIR,'apps'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '199br+(ask3jcxi!$oams**+$jy@1ybhy010jm@&kwz*ij55qs'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'simpleui',       # simpleui 优化
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 子应用注册
    'users',
    'user_options',
    'goods',
    'shopcart',

    'rest_framework',       # DRF框架
    'corsheaders',          # CORS 跨域
    'ckeditor',             # 富文本编辑器
    'ckeditor_uploader',    # 富文本编辑器的图片上传模块
    'django_filters',       # 过滤包
    'django_crontab',       # 定时任务

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',   # 添加CORS 跨域中间件
]

ROOT_URLCONF = 'BookStore.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR,'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'BookStore.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# 配置mysql 数据库
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',   # 指定数据库引擎
        'NAME': 'bookstore',
        'POST':3306,
        'HOST':'127.0.0.1',
        'USER':'bookstore',
        'PASSWORD':'123456'
        # 'ATOMIC_REQUESTS': True,    # 开启全局事务，不建议开启
    },
}

# 陪着redis 数据库
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    'session': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
    'verify_codes': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/2',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
}


# session存储缓存设置
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'

SESSION_CACHE_ALIAS = 'session'


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

# USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.user_info'


# CORS设置访问白名单 ，没在我这里报备的不允许访问
CORS_ORIGIN_WHITELIST = (
    'http://127.0.0.1',
    'http://localhost',
    'http://192.168.136.148',  	# 虚拟机的IP地址
    # 'http://www.baidu.com',	# 域名
    # 'http://api.baidu.com'	# 域名
)
CORS_ALLOW_CREDENTIALS = True   # 允许携带 cookie

# restframe_jwt 配置
import datetime
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}
JWT_AUTH = {
    # JWT_EXPIRATION_DELTA 指明token的有效期
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    # 配置自定义的jwt返回方法
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'users.utils.jwt_response_payload_handler',
}


# 日志的配置信息
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logs/bookstore2112.log"),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志器
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
}


# SIMPLEUI_LOGO = 'http://192.168.159.134:8000/static/logo/logo.jpg'  # 指定logo图片
SIMPLEUI_HOME_INFO = False      # 关闭simpleui的推广


# 富文本编辑器ckeditor配置
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',  # 工具条功能
        'height': 300,  # 编辑器高度
        # 'width': 300,  # 编辑器宽
    },
}

CKEDITOR_UPLOAD_PATH = ''  # 上传图片保存路径，如果使用了云存储服务，则此处值为空即可


# 阿里云的云存储配置信息
# ACCESS_KEY_ID = "LTAI5tALEi2yvFMb5YGSJKEy"				# 阿里云子用户ID
# ACCESS_KEY_SECRET = "yIvjxhoTjPPbln7yMlI6Vrc5YacwqA"    # 子用户密码
# END_POINT = "oss-cn-beijing.aliyuncs.com"   # 地域节点
# PREFIX_URL = 'http://'						# 协议头
# BUCKET_NAME = "wgc1234"					# 创建的BUCKET名称
# ALIYUN_OSS_CNAME = ""  						# 自定义域名，如果不需要可以不填写
# BUCKET_ACL_TYPE = "public-read"  			# private, public-read, public-read-write
#
# # 上传的文件要存放的路径，云存储的路径
# DEFAULT_FILE_STORAGE = 'aliyun_oss2_storage.backends.AliyunMediaStorage'
# # 静态文件的存放路径
# STATICFILES_STORAGE = 'aliyun_oss2_storage.backends.AliyunStaticStorage'
#
# MEDIA_URL = '/media/'
# MEDIA_ROOT = 'media'
# STATIC_URL = '/static/'
# STATIC_ROOT = 'static'

# 云存储访问格式：BUCKET_NAME + DEFAULT_FILE_STORAGE + 路径
# 例如： BUCKET_NAME.DEFAULT_FILE_STORAGE/static/logo/logo.jpg


# 阿里支付宝支付的配置信息
ALIPAY_APPID = '2021000119657313'   # 设置应用ID

# 配置应用的私钥
app_private_key_string = open(os.path.join(BASE_DIR, 'keys/app_private_key.pem'), 'r').read()

# 配置阿里支付宝的公钥
alipay_public_key_string = open(os.path.join(BASE_DIR, 'keys/alipay_public_key.pem'), 'r').read()

# 请求支付宝平台的接口
ALIPAY_URL = 'https://openapi.alipaydev.com/gateway.do'
ALIPAY_RETURN_URL = 'http://192.168.136.148'  # 支付完成后返回的页面


# 定时任务的执行时间设置
CRONJOBS = [
    # 第一个参数是定时任务的执行时间间隔
    # 第二个参数是定时任务指定的脚本对象
    # 第三个参数是定时任务的日志文件的存放位置
    ('*/5 * * * *', 'goods.crons.generate_static_index', '>> /home/xinyu/DjangoProject/BookStore/logs/crontab.log')
]

CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'     # 解决中文异常问题
